package nofrills.config.category;

import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.ColorControllerBuilder;
import dev.isxander.yacl3.api.controller.EnumControllerBuilder;
import dev.isxander.yacl3.api.controller.StringControllerBuilder;
import net.minecraft.text.Text;
import nofrills.config.Config;

import java.awt.*;

public class General {
    private static final String commandInfo = "\n\nAutomatic: Process the command automatically from anyone.\nManual: Add a button in the chat which you must click to process the command.\nIgnore: Process the command only if the player is whitelisted.\nDisabled: Fully disable the specific command.\n\nTip: You can manage the whitelist and blacklist with the \"/nf party\" command. Whitelisted players always have their commands processed automatically (if not disabled), and blacklisted players always have their commands ignored.";

    public static ConfigCategory create(Config defaults, Config config) {
        return ConfigCategory.createBuilder()
                .name(Text.of("General"))

                .option(Option.<Boolean>createBuilder()
                        .name(Text.of("Update Checker"))
                        .description(OptionDescription.of(Text.of("When joining Skyblock, the mod will automatically check if there is a new version available.")))
                        .binding(false, () -> Config.updateChecker, value -> Config.updateChecker = value)
                        .controller(Config::booleanController)
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Player"))
                        .collapsed(false)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Auto Sprint"))
                                .description(OptionDescription.of(Text.of("Keeps your sprint key held at all times, except for when you are submerged in water.")))
                                .binding(false, () -> Config.autoSprint, value -> Config.autoSprint = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Selfie Camera"))
                                .description(OptionDescription.of(Text.of("Removes the front facing camera perspective.")))
                                .binding(false, () -> Config.noSelfieCam, value -> Config.noSelfieCam = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Inventory"))
                        .collapsed(false)
                        .option(LabelOption.create(Text.of("Slot Binding")))
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Slot Binding"))
                                .description(OptionDescription.of(Text.of("Allows you to bind any valid slot to any of your hotbar slots, enabling you to swap items between the bound slots with a single click, similarly to NEU's Slot Binding feature.\n\nUsage: Shift + Left Click on either of the bound slots to swap items between them.\n\nBinding slots: Assign the \"Bind Slots\" key bind from NoFrills to any key. Open your inventory, and start holding the key bind while hovering over any slot, and then release the key bind while hovering another slot to bind them.\n\nClearing binds: Press and release the key bind while hovering over any slot to unbind it. Press and release the key bind while hovering over any hotbar slot to unbind every slot bound to it.")))
                                .binding(false, () -> Config.slotBinding, value -> Config.slotBinding = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Show Lines"))
                                .description(OptionDescription.of(Text.of("Draws lines between the slot you're hovering over, and any slots bound to it.")))
                                .binding(false, () -> Config.slotBindingLines, value -> Config.slotBindingLines = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Show Borders"))
                                .description(OptionDescription.of(Text.of("Draws borders over any slot that is bound to the slot you're hovering over.")))
                                .binding(false, () -> Config.slotBindingBorders, value -> Config.slotBindingBorders = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Color>createBuilder()
                                .name(Text.of("Bind Color"))
                                .description(OptionDescription.of(Text.of("The color used for the options above.")))
                                .binding(new Color(0, 255, 255, 255),
                                        () -> Config.slotBindingColor,
                                        value -> Config.slotBindingColor = value)
                                .controller(v -> ColorControllerBuilder.create(v).allowAlpha(true))
                                .build())
                        .option(LabelOption.create(Text.of("Other")))
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Hotbar Swap"))
                                .description(OptionDescription.of(Text.of("Allows you to drop down items from your inventory into the hotbar slot below them, swapping the item if needed, with Ctrl + Left Click. Essentially a simplistic alternative for Slot Binding that requires no configuration.")))
                                .binding(false, () -> Config.hotbarSwap, value -> Config.hotbarSwap = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(Text.of("Last Slot Override"))
                                .description(OptionDescription.of(Text.of("If an item were to be dropped down to the 9th slot, this option allows you to redirect it to another slot, as the 9th slot is always taken up by the Skyblock Menu. Set to 9 to not override.")))
                                .binding(8, () -> Config.hotbarSwapOverride, value -> Config.hotbarSwapOverride = value)
                                .controller(option -> Config.intSliderController(option, 1, 9, 1))
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Ignore Background"))
                                .description(OptionDescription.of(Text.of("Hides the tooltips for, and prevents clicking on items with empty names (such as the filler Glass Panes in most Skyblock GUI's). Does not activate in the Ultrasequencer add-on so that it can be completed normally.")))
                                .binding(false, () -> Config.ignoreBackground, value -> Config.ignoreBackground = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Middle Click Override"))
                                .description(OptionDescription.of(Text.of("Automatically replaces your left clicks with middle clicks in applicable Skyblock GUI's, making navigation smoother.\n\nNote: This option may break certain GUI's due to Hypixel not counting the middle click as a valid click. Make sure to report any bugs you find.")))
                                .binding(false, () -> Config.middleClickOverride, value -> Config.middleClickOverride = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Tooltips"))
                        .collapsed(false)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Fetch Pricing"))
                                .description(OptionDescription.of(Text.of("The main switch for tooltip features that display pricing information. The data has to be pulled from the NoFrills API, so the prices may not show up in case of connection issues.")))
                                .binding(false, () -> Config.fetchPricing, value -> Config.fetchPricing = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Auction Price"))
                                .description(OptionDescription.of(Text.of("Adds the lowest available Auction House Buy It Now price to item tooltips.")))
                                .binding(false, () -> Config.pricingAuction, value -> Config.pricingAuction = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Bazaar Prices"))
                                .description(OptionDescription.of(Text.of("Adds the lowest available Bazaar instant buy and instant sell price to item tooltips.")))
                                .binding(false, () -> Config.pricingBazaar, value -> Config.pricingBazaar = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("NPC Price"))
                                .description(OptionDescription.of(Text.of("Adds the NPC sell prices to item tooltips.")))
                                .binding(false, () -> Config.pricingNPC, value -> Config.pricingNPC = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Motes Price"))
                                .description(OptionDescription.of(Text.of("Adds the Motes sell prices to item tooltips while in the Rift.")))
                                .binding(false, () -> Config.pricingMote, value -> Config.pricingMote = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(Text.of("Grubber Stacks"))
                                .description(OptionDescription.of(Text.of("The amount of McGrubber's Burgers you've consumed, used to calculate the bonus Motes sell price.")))
                                .binding(0, () -> Config.pricingMoteStacks, value -> Config.pricingMoteStacks = value)
                                .controller(option -> Config.intSliderController(option, 0, 5, 1))
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Visual"))
                        .collapsed(false)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Hide Dead Mobs"))
                                .description(OptionDescription.of(Text.of("Prevents the game from rendering dead mobs.\n\nAdditionally, this feature also tries to hide the dead mob's nametag.")))
                                .binding(false, () -> Config.hideDeadMobs, value -> Config.hideDeadMobs = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Fullbright"))
                                .description(OptionDescription.of(Text.of("Makes the world bright by convincing the game that your brightness setting is very high.")))
                                .binding(false, () -> Config.fullbright, value -> Config.fullbright = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Keep Nametags"))
                                .description(OptionDescription.of(Text.of("Prevents the game from hiding the nametag of any sneaking/invisible player.")))
                                .binding(false, () -> Config.keepNametags, value -> Config.keepNametags = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Explosions"))
                                .description(OptionDescription.of(Text.of("Prevents the server from spawning any explosion particles.")))
                                .binding(false, () -> Config.noExplosions, value -> Config.noExplosions = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Fire Overlay"))
                                .description(OptionDescription.of(Text.of("Hides the fire overlay that blocks half of your screen while you're on fire.")))
                                .binding(false, () -> Config.noFireOverlay, value -> Config.noFireOverlay = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Break Particles"))
                                .description(OptionDescription.of(Text.of("Stops your game from spawning any particles for broken blocks.")))
                                .binding(false, () -> Config.noBreakParticles, value -> Config.noBreakParticles = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Boss Bar"))
                                .description(OptionDescription.of(Text.of("Prevents the bar at the top of the screen from rendering.")))
                                .binding(false, () -> Config.noBossBar, value -> Config.noBossBar = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Loading Screen"))
                                .description(OptionDescription.of(Text.of("Removes the world loading screen that appears when switching islands.")))
                                .binding(false, () -> Config.noLoadingScreen, value -> Config.noLoadingScreen = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Effect Display"))
                                .description(OptionDescription.of(Text.of("Removes the potion effect displays from the HUD and the inventory.")))
                                .binding(false, () -> Config.noEffectDisplay, value -> Config.noEffectDisplay = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Overlays"))
                        .collapsed(false)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Etherwarp"))
                                .description(OptionDescription.of(Text.of("Renders an overlay for the targeted block, as you're about to use the Ether Transmission ability. Changes color depending on if the teleport can succeed or not.")))
                                .binding(false, () -> Config.overlayEtherwarp, value -> Config.overlayEtherwarp = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Wardrobe"))
                        .collapsed(false)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Wardrobe Hotkeys"))
                                .description(OptionDescription.of(Text.of("Adds number hotkeys (1-9) to the Skyblock Wardrobe, letting you easily equip the set you want.")))
                                .binding(false, () -> Config.wardrobeHotkeys, value -> Config.wardrobeHotkeys = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Hotkey Sounds"))
                                .description(OptionDescription.of(Text.of("Play a sound effect when you switch your set using the Wardrobe Hotkeys feature.")))
                                .binding(false, () -> Config.wardrobeHotkeysSound, value -> Config.wardrobeHotkeysSound = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Chat"))
                        .collapsed(false)
                        .option(LabelOption.create(Text.of("Party Chat")))
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Finder Options"))
                                .description(OptionDescription.of(Text.of("Adds various buttons in chat when anyone joins your party through Party Finder, such as a copy name or kick button.")))
                                .binding(false, () -> Config.partyFinderOptions, value -> Config.partyFinderOptions = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<String>createBuilder()
                                .name(Text.of("Command Prefixes"))
                                .description(OptionDescription.of(Text.of("The list of prefixes used by the command options below, separated with a space. Leave empty to fully disable all party commands.")))
                                .binding("! ?", () -> Config.partyPrefixes, value -> Config.partyPrefixes = value)
                                .controller(StringControllerBuilder::create)
                                .build())
                        .option(Option.<Config.partyBehavior>createBuilder()
                                .name(Text.of("Warp Command"))
                                .description(OptionDescription.of(Text.of("Set the behavior of the \"warp\" command, which allows your party members to warp themselves into your server on demand." + commandInfo)))
                                .binding(Config.partyBehavior.Disabled, () -> Config.partyCmdWarp, value -> Config.partyCmdWarp = value)
                                .controller(option -> EnumControllerBuilder.create(option)
                                        .enumClass(Config.partyBehavior.class)
                                        .formatValue(value -> Text.of(value.name())))
                                .build())
                        .option(Option.<Config.partyBehavior>createBuilder()
                                .name(Text.of("Transfer Command"))
                                .description(OptionDescription.of(Text.of("Set the behavior of the \"ptme\" command, which allows your party members to transfer the party to themselves on demand." + commandInfo)))
                                .binding(Config.partyBehavior.Disabled, () -> Config.partyCmdTransfer, value -> Config.partyCmdTransfer = value)
                                .controller(option -> EnumControllerBuilder.create(option)
                                        .enumClass(Config.partyBehavior.class)
                                        .formatValue(value -> Text.of(value.name())))
                                .build())
                        .option(Option.<Config.partyBehavior>createBuilder()
                                .name(Text.of("All Invite Command"))
                                .description(OptionDescription.of(Text.of("Set the behavior of the \"allinv\" command, which allows your party members to toggle the All Invite setting on demand." + commandInfo)))
                                .binding(Config.partyBehavior.Disabled, () -> Config.partyCmdAllInvite, value -> Config.partyCmdAllInvite = value)
                                .controller(option -> EnumControllerBuilder.create(option)
                                        .enumClass(Config.partyBehavior.class)
                                        .formatValue(value -> Text.of(value.name())))
                                .build())
                        .option(Option.<Config.partyBehavior>createBuilder()
                                .name(Text.of("Downtime Command"))
                                .description(OptionDescription.of(Text.of("Set the behavior of the \"dt\" command, letting your party members announce that they need downtime. If anyone uses the command during a Dungeon/Kuudra run, a reminder is set for the end of the run.\n\nNote: This command does nothing if set to Manual mode." + commandInfo)))
                                .binding(Config.partyBehavior.Disabled, () -> Config.partyCmdDowntime, value -> Config.partyCmdDowntime = value)
                                .controller(option -> EnumControllerBuilder.create(option)
                                        .enumClass(Config.partyBehavior.class)
                                        .formatValue(value -> Text.of(value.name())))
                                .build())
                        .option(Option.<Config.partyBehavior>createBuilder()
                                .name(Text.of("Queue Commands"))
                                .description(OptionDescription.of(Text.of("Sets the behavior of the instance queue commands (such as \"!f7\" to enter Floor 7, or \"!k5\"/\"!t5\" to enter Infernal Kuudra), letting your party members queue for Dungeons/Kuudra without being the party leader." + commandInfo)))
                                .binding(Config.partyBehavior.Disabled, () -> Config.partyCmdQueue, value -> Config.partyCmdQueue = value)
                                .controller(option -> EnumControllerBuilder.create(option)
                                        .enumClass(Config.partyBehavior.class)
                                        .formatValue(value -> Text.of(value.name())))
                                .build())
                        .option(Option.<Config.partyBehavior>createBuilder()
                                .name(Text.of("Coords Command"))
                                .description(OptionDescription.of(Text.of("Set the behavior of the \"coords\" command, which sends your current coordinates in the party chat." + commandInfo)))
                                .binding(Config.partyBehavior.Disabled, () -> Config.partyCmdCoords, value -> Config.partyCmdCoords = value)
                                .controller(option -> EnumControllerBuilder.create(option)
                                        .enumClass(Config.partyBehavior.class)
                                        .formatValue(value -> Text.of(value.name())))
                                .build())
                        .option(LabelOption.create(Text.of("Waypoints")))
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Party Waypoints"))
                                .description(OptionDescription.of(Text.of("Automatically creates temporary waypoints for coordinates sent by your party members. Should support any known coordinate format, such as the one from Patcher.")))
                                .binding(false, () -> Config.partyWaypoints, value -> Config.partyWaypoints = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(Text.of("Party Waypoint Duration"))
                                .description(OptionDescription.of(Text.of("The duration that the party waypoints stay rendered for, in seconds.")))
                                .binding(60, () -> Config.partyWaypointTime, value -> Config.partyWaypointTime = value)
                                .controller(option -> Config.intSliderController(option, 1, 300, 1))
                                .build())
                        .option(Option.<Color>createBuilder()
                                .name(Text.of("Party Waypoint Color"))
                                .description(OptionDescription.of(Text.of("The color used for the party waypoints.")))
                                .binding(new Color(85, 85, 255, 170),
                                        () -> Config.partyWaypointColor,
                                        value -> Config.partyWaypointColor = value)
                                .controller(v -> ColorControllerBuilder.create(v).allowAlpha(true))
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Global Chat Waypoints"))
                                .description(OptionDescription.of(Text.of("Automatically creates temporary waypoints for coordinates sent in the global chat. Should support any known coordinate format, such as the one from Patcher.")))
                                .binding(false, () -> Config.chatWaypoints, value -> Config.chatWaypoints = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(Text.of("Chat Waypoint Duration"))
                                .description(OptionDescription.of(Text.of("The duration that the global chat waypoints stay rendered for, in seconds.")))
                                .binding(30, () -> Config.chatWaypointTime, value -> Config.chatWaypointTime = value)
                                .controller(option -> Config.intSliderController(option, 1, 300, 1))
                                .build())
                        .option(Option.<Color>createBuilder()
                                .name(Text.of("Chat Waypoint Color"))
                                .description(OptionDescription.of(Text.of("The color used for the global chat waypoints.")))
                                .binding(new Color(85, 255, 255, 170),
                                        () -> Config.chatWaypointColor,
                                        value -> Config.chatWaypointColor = value)
                                .controller(v -> ColorControllerBuilder.create(v).allowAlpha(true))
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Viewmodel"))
                        .collapsed(true)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Haste"))
                                .description(OptionDescription.of(Text.of("Prevents Haste (and Mining Fatigue) from affecting your swing speed.")))
                                .binding(false, () -> Config.noHaste, value -> Config.noHaste = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("No Equip Animation"))
                                .description(OptionDescription.of(Text.of("Disables the animation of your held item moving up after it's either changed or updated.")))
                                .binding(false, () -> Config.noEquipAnim, value -> Config.noEquipAnim = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(Option.<Integer>createBuilder()
                                .name(Text.of("Swing Speed"))
                                .description(OptionDescription.of(Text.of("Allows you to set a custom hand swing speed. Set to 0 to not override.")))
                                .binding(0, () -> Config.viewmodelSpeed, value -> Config.viewmodelSpeed = value)
                                .controller(option -> Config.intSliderController(option, 0, 20, 1))
                                .build())
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Custom Viewmodel"))
                                .description(OptionDescription.of(Text.of("Main toggle for if the offset, scale and rotation values should be applied to your viewmodel.")))
                                .binding(false, () -> Config.viewmodelEnable, value -> Config.viewmodelEnable = value)
                                .controller(Config::booleanController)
                                .build())
                        .option(LabelOption.create(Text.of("Offset")))
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("X"))
                                .description(OptionDescription.of(Text.of("The offset for your viewmodel's position along the X axis.")))
                                .binding(0.0f, () -> Config.viewmodelOffsetX, value -> Config.viewmodelOffsetX = value)
                                .controller(option -> Config.floatSliderController(option, -2.0f, 2.0f, 0.01f))
                                .build())
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("Y"))
                                .description(OptionDescription.of(Text.of("The offset for your viewmodel's position along the Y axis.")))
                                .binding(0.0f, () -> Config.viewmodelOffsetY, value -> Config.viewmodelOffsetY = value)
                                .controller(option -> Config.floatSliderController(option, -2.0f, 2.0f, 0.01f))
                                .build())
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("Z"))
                                .description(OptionDescription.of(Text.of("The offset for your viewmodel's position along the Z axis.")))
                                .binding(0.0f, () -> Config.viewmodelOffsetZ, value -> Config.viewmodelOffsetZ = value)
                                .controller(option -> Config.floatSliderController(option, -2.0f, 2.0f, 0.01f))
                                .build())
                        .option(LabelOption.create(Text.of("Scale")))
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("X"))
                                .description(OptionDescription.of(Text.of("The scale for your viewmodel along the X axis.")))
                                .binding(1.0f, () -> Config.viewmodelScaleX, value -> Config.viewmodelScaleX = value)
                                .controller(option -> Config.floatSliderController(option, 0.0f, 2.0f, 0.01f))
                                .build())
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("Y"))
                                .description(OptionDescription.of(Text.of("The scale for your viewmodel along the Y axis.")))
                                .binding(1.0f, () -> Config.viewmodelScaleY, value -> Config.viewmodelScaleY = value)
                                .controller(option -> Config.floatSliderController(option, 0.0f, 2.0f, 0.01f))
                                .build())
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("Z"))
                                .description(OptionDescription.of(Text.of("The scale for your viewmodel along the Z axis.")))
                                .binding(1.0f, () -> Config.viewmodelScaleZ, value -> Config.viewmodelScaleZ = value)
                                .controller(option -> Config.floatSliderController(option, 0.0f, 2.0f, 0.01f))
                                .build())
                        .option(LabelOption.create(Text.of("Rotation")))
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("X"))
                                .description(OptionDescription.of(Text.of("The rotation for your viewmodel along the X axis.")))
                                .binding(0.0f, () -> Config.viewmodelRotX, value -> Config.viewmodelRotX = value)
                                .controller(option -> Config.floatSliderController(option, -360.0f, 360.0f, 0.5f))
                                .build())
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("Y"))
                                .description(OptionDescription.of(Text.of("The rotation for your viewmodel along the Y axis.")))
                                .binding(0.0f, () -> Config.viewmodelRotY, value -> Config.viewmodelRotY = value)
                                .controller(option -> Config.floatSliderController(option, -360.0f, 360.0f, 0.5f))
                                .build())
                        .option(Option.<Float>createBuilder()
                                .name(Text.of("Z"))
                                .description(OptionDescription.of(Text.of("The rotation for your viewmodel along the Z axis.")))
                                .binding(0.0f, () -> Config.viewmodelRotZ, value -> Config.viewmodelRotZ = value)
                                .controller(option -> Config.floatSliderController(option, -360.0f, 360.0f, 0.5f))
                                .build())
                        .build())

                .group(OptionGroup.createBuilder()
                        .name(Text.of("Misc"))
                        .collapsed(true)
                        .option(Option.<Boolean>createBuilder()
                                .name(Text.of("Terror Fix"))
                                .description(OptionDescription.of(Text.of("Replicates the behavior of old Terror armor by playing the piston sound effect on each arrow hit.")))
                                .binding(false, () -> Config.terrorFix, value -> Config.terrorFix = value)
                                .controller(Config::booleanController)
                                .build())
                        .build())


                .build();
    }
}